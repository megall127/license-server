import type { HttpContext } from '@adonisjs/core/http'
import { inject } from '@adonisjs/core'
import { OpenAI } from 'openai'
import env from '#start/env'

@inject()
export default class AiChatController {
  private openai: OpenAI

  constructor() {
    if (!env.get('OPENAI_API_KEY')) {
      console.warn('OPENAI_API_KEY n√£o configurada. Chat de IA n√£o funcionar√°.')
    }
    
    this.openai = new OpenAI({
      apiKey: env.get('OPENAI_API_KEY'),
    })
  }

  /**
   * Processa mensagem do usu√°rio e retorna resposta da IA
   */
  async chat({ request, response }: HttpContext) {
    try {
      const { message, companyId } = request.only(['message', 'companyId'])

      if (!message) {
        return response.badRequest({
          error: 'Mensagem √© obrigat√≥ria'
        })
      }

      if (!env.get('OPENAI_API_KEY')) {
        return response.serviceUnavailable({
          error: 'Servi√ßo de IA temporariamente indispon√≠vel',
          message: 'A chave da API do OpenAI n√£o est√° configurada. Entre em contato com o administrador.'
        })
      }

      // Contexto otimizado do ERP
      const systemPrompt = `Voc√™ √© um assistente do Nexos ERP. Responda de forma concisa e pr√°tica em portugu√™s.

      SISTEMA NEXOS ERP:
      
      üì¶ PRODUTOS: "Produtos e Servi√ßos" ‚Üí "Novo Produto"
      - Obrigat√≥rio: Nome e Tipo
      - Opcional: C√≥digo, Fornecedor, Observa√ß√µes
      - Estoque: marque "Ativar estoque" para produtos f√≠sicos
      - Servi√ßos: desmarque "Ativar estoque"
      
      üí∞ FLUXO DE CAIXA: Menu "Fluxo de Caixa"
      - Registre vendas com m√©todo de pagamento
      - Visualize resumos por per√≠odo
      
      üë• FUNCION√ÅRIOS: Cadastro com Nome, Email, Cargo, Sal√°rio
      üìÖ AGENDAMENTOS: Cliente, Data, Hora, Tipo de Servi√ßo
      üè¢ EMPRESAS: Sistema multi-empresa - selecione empresa primeiro
      
      Seja direto e espec√≠fico. M√°ximo 3-4 frases por resposta.`

      // Verificar se √© uma pergunta espec√≠fica sobre adicionar produtos
      const isProductQuestion = this.isProductRelatedQuestion(message)
      
      let enhancedPrompt = systemPrompt
      
      if (isProductQuestion) {
        enhancedPrompt += `
        
        RESPOSTA R√ÅPIDA PARA PRODUTOS:
        
        1. V√° em "Produtos e Servi√ßos" ‚Üí "Novo Produto"
        2. Preencha Nome e Tipo (obrigat√≥rio)
        3. Marque "Ativar estoque" para produtos f√≠sicos
        4. Desmarque para servi√ßos (ex: corte de cabelo)
        5. Preencha campos opcionais (c√≥digo, fornecedor, etc.)
        6. Clique "Salvar Produto"
        
        Dica: Selecione uma empresa primeiro no Nexos ERP!`
      }

      // Timeout de 10 segundos para evitar travamentos
      const completionPromise = this.openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: enhancedPrompt
          },
          {
            role: "user",
            content: message
          }
        ],
        max_tokens: 300,
        temperature: 0.3,
        top_p: 0.9,
        frequency_penalty: 0,
        presence_penalty: 0,
      })

      const timeoutPromise = new Promise((_, reject) => 
        setTimeout(() => reject(new Error('Timeout')), 10000)
      )

      const completion = await Promise.race([completionPromise, timeoutPromise]) as any
      const aiResponse = completion.choices[0]?.message?.content || 'Desculpe, n√£o consegui processar sua mensagem.'

      return response.ok({
        success: true,
        response: aiResponse,
        timestamp: new Date().toISOString()
      })

    } catch (error) {
      console.error('Erro no chat de IA:', error)
      
      // Tratamento espec√≠fico para timeout
      if (error instanceof Error && error.message === 'Timeout') {
        return response.requestTimeout({
          error: 'Timeout na resposta da IA',
          message: 'A resposta est√° demorando mais que o esperado. Tente novamente com uma pergunta mais espec√≠fica.'
        })
      }
      
      return response.internalServerError({
        error: 'Erro interno do servidor',
        message: 'N√£o foi poss√≠vel processar sua mensagem no momento. Tente novamente.'
      })
    }
  }

  /**
   * Verifica se a pergunta √© relacionada a produtos (otimizado)
   */
  private isProductRelatedQuestion(message: string): boolean {
    const lowerMessage = message.toLowerCase()
    
    // Palavras-chave principais para detec√ß√£o r√°pida
    const mainKeywords = ['produto', 'estoque', 'adicionar', 'cadastrar', 'novo']
    
    return mainKeywords.some(keyword => lowerMessage.includes(keyword))
  }

  /**
   * Retorna sugest√µes de perguntas comuns
   */
  async getSuggestions({ response }: HttpContext) {
    const suggestions = [
      "Como adicionar um novo produto ao estoque?",
      "Qual a diferen√ßa entre produto e servi√ßo no sistema?",
      "Como configurar estoque m√≠nimo para produtos?",
      "Como registrar uma venda no fluxo de caixa?",
      "Como cadastrar um novo funcion√°rio?",
      "Como criar um agendamento para um cliente?",
      "Como visualizar o resumo financeiro do m√™s?",
      "Como gerenciar tipos de produtos e servi√ßos?",
      "Como cancelar uma transa√ß√£o j√° registrada?",
      "Como cadastrar um novo cliente?",
      "Como configurar uma nova empresa?",
      "Como visualizar produtos com estoque baixo?"
    ]

    return response.ok({
      success: true,
      suggestions
    })
  }
}
